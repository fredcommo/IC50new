fy <- y[2:(n-1)]*rep(c(4, 2), (n-2)/2)
return(dx/3*(f1 + sum(fy) + fn))
}
.confInt <- function(stdErr, yobs, yfit, newy){
n <- length(yobs)
ybar <- mean(yobs, na.rm = TRUE)
t <- qt(.975, n-2)
ci <- t*stdErr*sqrt((1/n+(newy - ybar)^2/sum((newy - ybar)^2)))
lo <- newy - ci
hi <- newy + ci
return(list(lo = lo, hi = hi))
}
.invModel <- function(pars, target){
return(pars$xmid - 1/pars$scal*log10(((pars$top - pars$bottom)/(target - pars$bottom))^(1/pars$s)-1))
}
.estimateRange <- function(target, stdErr, pars, B, useLog){
Xtarget = .invModel(pars, target)
if(is.na(Xtarget)) Dmin <- D <- Dmax <- NA
else{
Ytmp <- target + rnorm(B, 0, stdErr)
if(any(Ytmp<pars$bottom)) Ytmp <- Ytmp[-which(Ytmp<pars$bottom)]
if(any(Ytmp>pars$top)) Ytmp <- Ytmp[-which(Ytmp>pars$top)]
Q <- quantile(Ytmp, probs=c(.05, .95), na.rm=T)
estimates <- .invModel(pars, c(Q[1], target, Q[2]))
if(useLog) estimates <- 10^estimates
Dmin <- signif(min(estimates), 2)
D <- signif(estimates[2], 2)
Dmax <- signif(max(estimates), 2)
}
return(as.numeric(c(Dmin, D, Dmax)))
}
dat <- read.delim("demo2.tsv")
test <- nplr(dat$x, convertToProp(dat$y), method="sdw")
plot(test)
dat <- read.delim("demo1.tsv")
test <- nplr(dat$x, convertToProp(dat$y), method="sdw")
plot(test)
source('~/Documents/MyProjects/FredScripts/nplr/R/helpers.R')
Weights
residuals
residuals/Weights^2
5/.2
5/.4
residuals*Weights^2
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
Weights <- lapply(unique(x), function(xi){
nrep <- sum(x==xi, na.rm=TRUE)
s <- 1
if(nrep>1) s <- sd(yobs[x==xi], na.rm=TRUE)
return(rep(s, nrep))
})
Weights <- do.call(c, Weights)
return(sum(residuals*Weights^2))
}
dat <- read.delim("demo2.tsv")
test <- nplr(dat$x, convertToProp(dat$y), method="sdw")
plot(test)
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
Weights <- lapply(unique(x), function(xi){
nrep <- sum(x==xi, na.rm=TRUE)
s <- 1
if(nrep>1) s <- sd(yobs[x==xi], na.rm=TRUE)
return(rep(s, nrep))
})
Weights <- do.call(c, Weights)
return(sum(residuals/Weights^2))
}
dat <- read.delim("demo2.tsv")
test <- nplr(dat$x, convertToProp(dat$y), method="sdw")
plot(test)
?rep
s <- c("a", "b", "c")
rep(s, times=1:3)
dat <- read.delim("demo1.tsv")
x <- dat$x
y <- dat$y
by(y, x, sd, na.rm=TRUE)
dat <- read.delim("demo2.tsv")
x <- dat$x
y <- dat$y
by(y, x, sd, na.rm=TRUE)
s <- as.numeric(by(y, x, sd, na.rm=TRUE))
s
nrep <- as.numeric(table(x))
nrep
ifelse(nrep>1, rep(s, nrep), 1)
s <- as.numeric(by(y, x, sd, na.rm=TRUE))
nrep <- as.numeric(table(x))
ifelse(nrep>1, rep(s, nrep), 1)
rep(s, times=nrep)
s <- as.numeric(by(y, x, sd, na.rm=TRUE))
s <- ifelse(is.na(s), 1, s)
s
nrep <- as.numeric(table(x))
rep(s, times=nrep)
dat <- read.delim("demo1.tsv")
x <- dat$x
y <- dat$y
s <- as.numeric(by(y, x, sd, na.rm=TRUE))
s <- ifelse(is.na(s), 1, s)
nrep <- as.numeric(table(x))
rep(s, times=nrep)
dat <- read.delim("demo1.tsv")
x <- dat$x
y <- dat$y
s <- as.numeric(by(y, x, sd, na.rm=TRUE))
s <- ifelse(is.na(s), 1, s)
rep(s, times=as.numeric(table(x))
rep(s, times=as.numeric(table(x)))
rep(s, times=table(x))
dat <- read.delim("demo2.tsv")
x <- dat$x
y <- dat$y
s <- as.numeric(by(y, x, sd, na.rm=TRUE))
s <- ifelse(is.na(s), 1, s)
rep(s, times=table(x))
dat <- read.delim("demo2.tsv")
x <- dat$x
y <- dat$y
v <- as.numeric(by(y, x, var, na.rm=TRUE))
v <- ifelse(is.na(s), 1, v)
rep(v, times=table(x))
dat <- read.delim("demo1.tsv")
x <- dat$x
y <- dat$y
v <- as.numeric(by(y, x, var, na.rm=TRUE))
v <- ifelse(is.na(s), 1, v)
rep(v, times=table(x))
v <- as.numeric(by(y, x, var, na.rm=TRUE))
v <- ifelse(is.na(v), 1, v)
rep(v, times=table(x))
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
v <- ifelse(is.na(v), 1, v)
Weights <- rep(v, times=table(x))
return(sum(residuals/Weights))
}
dat <- read.delim("demo1.tsv")
x <- dat$x
y <- dat$y
v <- as.numeric(by(y, x, var, na.rm=TRUE))
v <- ifelse(is.na(v), 1, v)
rep(v, times=table(x))
test <- nplr(dat$x, convertToProp(dat$y), method="sdw")
plot(test)
dat <- read.delim("demo2.tsv")
x <- dat$x
y <- dat$y
v <- as.numeric(by(y, x, var, na.rm=TRUE))
v <- ifelse(is.na(v), 1, v)
rep(v, times=table(x))
test <- nplr(dat$x, convertToProp(dat$y), method="sdw")
plot(test)
test <- nplr(dat$x, convertToProp(dat$y), method="res")
source('~/Documents/MyProjects/FredScripts/nplr/R/helpers.R')
x
Weights <- sapply(unique(x), function(xi){
nrep <- sum(x==xi)
v <- 1
if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
rep(v, nrep)
})
Weights
Weights <- lapply(unique(x), function(xi){
nrep <- sum(x==xi)
v <- 1
if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
rep(v, nrep)
})
Weights
Weights <- do.call(c, Weights)
Weights
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
#   v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
#   v <- ifelse(is.na(v), 1, v)
Weights <- lapply(unique(x), function(xi){
nrep <- sum(x==xi)
v <- 1
if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
rep(v, nrep)
})
Weights <- do.call(c, Weights)
#  Weights <- rep(v, times=table(x))
return(sum(residuals/Weights))
}
system.time(test <- nplr(dat$x, convertToProp(dat$y), method="res"))
plot(test)
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
v <- ifelse(is.na(v), 1, v)
Weights <- rep(v, times=table(x))
#   Weights <- lapply(unique(x), function(xi){
#     nrep <- sum(x==xi)
#     v <- 1
#     if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
#     rep(v, nrep)
#   })
#   Weights <- do.call(c, Weights)
return(sum(residuals/Weights))
}
system.time(test <- nplr(dat$x, convertToProp(dat$y), method="res"))
plot(test)
system.time(test <- nplr(dat$x, convertToProp(dat$y), method="res"))
plot(test)
system.time(test <- nplr(dat$x, convertToProp(dat$y), method="res"))
plot(test)
root <- "/Users/fredcommo/Documents/MyProjects/NCI60_drugResponse"
inPath <- file.path(root, "data")
outPath <- file.path(root, "results")
allCells <- read.csv(file.path(inPath, "CANCER60DOSERESPONSE_SEP12_oncoDrugs.csv"), sep="\t")
compounds <- unique(allCells$DRUG.NAME..USAN.)
compound <- compounds[1]
compound
tmp <- allCells[allCells$DRUG.NAME..USAN.==compound,]
cells <- unique(tmp$CELL)
cell <- cells[1]
cat("comp:", as.character(compound), "cell:", as.character(cell), "\n")
x <- as.numeric(as.character(tmp$LCONC[tmp$CELL==cell]))
nrep <- max(table(x), na.rm=TRUE)
y <- as.numeric(as.character(tmp$GIPRCNT[tmp$CELL==cell]))
y <- y/100
nrep
x
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
v <- ifelse(is.na(v), 1, v)
Weights <- rep(v, times=table(x))
#   Weights <- lapply(unique(x), function(xi){
#     nrep <- sum(x==xi)
#     v <- 1
#     if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
#     rep(v, nrep)
#   })
#   Weights <- do.call(c, Weights)
return(sum(residuals/Weights))
}
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
getGoodness(test)
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
#   v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
#   v <- ifelse(is.na(v), 1, v)
#  Weights <- rep(v, times=table(x))
Weights <- lapply(unique(x), function(xi){
nrep <- sum(x==xi)
v <- 1
if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
rep(v, nrep)
})
Weights <- do.call(c, Weights)
return(sum(residuals/Weights))
}
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
getGoodness(test)
cat("comp:", as.character(compound), "cell:", as.character(cell), "\n")
x <- as.numeric(as.character(tmp$LCONC[tmp$CELL==cell]))
nrep <- max(table(x), na.rm=TRUE)
y <- as.numeric(as.character(tmp$GIPRCNT[tmp$CELL==cell]))
y <- y/100
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
getGoodness(test)
source('~/Documents/MyProjects/FredScripts/nplr/R/helpers.R')
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
v <- ifelse(is.na(v), 1, v)
Weights <- rep(v, times=table(x))
#   Weights <- lapply(unique(x), function(xi){
#     nrep <- sum(x==xi)
#     v <- 1
#     if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
#     rep(v, nrep)
#   })
#   Weights <- do.call(c, Weights)
return(sum(residuals/Weights))
}
cat("comp:", as.character(compound), "cell:", as.character(cell), "\n")
x <- as.numeric(as.character(tmp$LCONC[tmp$CELL==cell]))
nrep <- max(table(x), na.rm=TRUE)
y <- as.numeric(as.character(tmp$GIPRCNT[tmp$CELL==cell]))
y <- y/100
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
getGoodness(test)
Weights <- lapply(unique(x), function(xi){
var(y[x==xi], na.rm=TRUE)
})
Weights
Weights <- sapply(unique(x), function(xi){
var(y[x==xi], na.rm=TRUE)
})
Weights
Weights <- rep(Weights, times=table(x))
Weights
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
#   v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
#   v <- ifelse(is.na(v), 1, v)
#  Weights <- rep(v, times=table(x))
#   Weights <- lapply(unique(x), function(xi){
#     nrep <- sum(x==xi)
#     v <- 1
#     if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
#     rep(v, nrep)
#   })
#   Weights <- do.call(c, Weights)
Weights <- sapply(unique(x), function(xi){
var(y[x==xi], na.rm=TRUE)
})
Weights <- rep(Weights, times=table(x))
return(sum(residuals/Weights))
}
cat("comp:", as.character(compound), "cell:", as.character(cell), "\n")
x <- as.numeric(as.character(tmp$LCONC[tmp$CELL==cell]))
nrep <- max(table(x), na.rm=TRUE)
y <- as.numeric(as.character(tmp$GIPRCNT[tmp$CELL==cell]))
y <- y/100
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
getGoodness(test)
cat("comp:", as.character(compound), "cell:", as.character(cell), "\n")
x <- as.numeric(as.character(tmp$LCONC[tmp$CELL==cell]))
nrep <- max(table(x), na.rm=TRUE)
y <- as.numeric(as.character(tmp$GIPRCNT[tmp$CELL==cell]))
y <- y/100
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
getGoodness(test)
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
#   v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
#   v <- ifelse(is.na(v), 1, v)
#  Weights <- rep(v, times=table(x))
Weights <- lapply(unique(x), function(xi){
nrep <- sum(x==xi)
v <- 1
if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
rep(v, nrep)
})
Weights <- do.call(c, Weights)
#   Weights <- sapply(unique(x), function(xi){
#     var(y[x==xi], na.rm=TRUE)
#   })
#   Weights <- rep(Weights, times=table(x))
#
return(sum(residuals/Weights))
}
cat("comp:", as.character(compound), "cell:", as.character(cell), "\n")
x <- as.numeric(as.character(tmp$LCONC[tmp$CELL==cell]))
nrep <- max(table(x), na.rm=TRUE)
y <- as.numeric(as.character(tmp$GIPRCNT[tmp$CELL==cell]))
y <- y/100
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
getGoodness(test)
dat <- read.delim("demo2.tsv")
system.time(test <- nplr(dat$x, dat$y, method="sdw"))
plot(test)
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
v <- ifelse(is.na(v), 1, v)
Weights <- rep(v, times=table(x))
#   Weights <- lapply(unique(x), function(xi){
#     nrep <- sum(x==xi)
#     v <- 1
#     if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
#     rep(v, nrep)
#   })
#   Weights <- do.call(c, Weights)
#   Weights <- sapply(unique(x), function(xi){
#     var(y[x==xi], na.rm=TRUE)
#   })
#   Weights <- rep(Weights, times=table(x))
#
return(sum(residuals/Weights))
}
dat <- read.delim("demo2.tsv")
system.time(test <- nplr(dat$x, dat$y, method="sdw"))
plot(test)
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
#   v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
#   v <- ifelse(is.na(v), 1, v)
#  Weights <- rep(v, times=table(x))
#   Weights <- lapply(unique(x), function(xi){
#     nrep <- sum(x==xi)
#     v <- 1
#     if(nrep>1) v <- var(y[x==xi], na.rm=TRUE)
#     rep(v, nrep)
#   })
#   Weights <- do.call(c, Weights)
Weights <- sapply(unique(x), function(xi){
var(y[x==xi], na.rm=TRUE)
})
Weights <- rep(Weights, times=table(x))
return(sum(residuals/Weights))
}
dat <- read.delim("demo2.tsv")
system.time(test <- nplr(dat$x, dat$y, method="sdw"))
plot(test)
source('~/Documents/MyProjects/FredScripts/nplr/R/helpers.R')
.sdWeight <- function(pars, x, yobs, Weights, wcoef, nPL){
bottom <- pars[1]
top <- pars[2]
xmid <- pars[3]
scal <- pars[4]
s <- pars[5]
ytheo <- nPL(bottom, top, xmid, scal, s, x)
residuals <- (yobs - ytheo)^2
# slowest method
#   v <- as.numeric(by(yobs, x, var, na.rm=TRUE))
#   v <- ifelse(is.na(v), 1, v)
#  Weights <- rep(v, times=table(x))
#   Weights <- sapply(unique(x), function(xi){
#     var(yobs[x==xi], na.rm=TRUE)
#   })
#   Weights <- rep(Weights, times=table(x))
# quickest method
Weights <- lapply(unique(x), function(xi){
nrep <- sum(x==xi)
v <- 1
if(nrep>1) v <- var(yobs[x==xi], na.rm=TRUE)
rep(v, nrep)
})
Weights <- do.call(c, Weights)
return(sum(residuals/Weights))
}
cat("comp:", as.character(compound), "cell:", as.character(cell), "\n")
x <- as.numeric(as.character(tmp$LCONC[tmp$CELL==cell]))
nrep <- max(table(x), na.rm=TRUE)
y <- as.numeric(as.character(tmp$GIPRCNT[tmp$CELL==cell]))
y <- y/100
system.time(test <- nplr(x, y, useLog=FALSE, method="sdw", silent=TRUE))
getGoodness(test)
source('~/Documents/MyProjects/FredScripts/nplr/R/helpers.R')
q()
